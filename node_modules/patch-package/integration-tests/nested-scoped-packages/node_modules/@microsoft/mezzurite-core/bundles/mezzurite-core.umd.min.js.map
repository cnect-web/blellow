{"version":3,"sources":["../package/src/utils/performance-constants.ts","../package/src/utils/performance-global.ts","../package/src/services/performance-utils.service.ts","../package/src/utils/performance-measure.ts","../package/src/services/performance-timing.service.ts","../package/src/services/performance-telemetry.service.ts","../package/src/utils/performance-metric.ts"],"names":["MezzuriteConstants","mezzuriteObjectVersion","captureCycleTimeout","slowestResourceTimeout","idLength","domAttributeName","measureNamePrefix","altName","vltName","fvltName","vltMarkStart","altMarkStart","altMarkEnd","componentMarkStart","componentMarkEnd","componentMarkRenderStart","jsllConfigName","versionName","allComponents","redirect","sessionData","fullNamePartTitle","fullNamePartKey","unsupportedBrowserName","unsupportedBrowserPerf","MezzuriteObject","this","firstViewLoaded","captureCycleStarted","routerPerf","measures","defaultLogs","childElementNames","slowestResource","currentComponents","vltComponentLookup","elementLookup","MezzuriteUtils","createMezzuriteObject","obj","addCustomEventPolyfill","mzObj","prop","undefined","testReset","mezzurite","makeId","text","possible","i","charAt","Math","floor","random","length","getFunctionName","fun","ret","toString","substr","indexOf","getDisplayName","WrappedComponent","name","getName","key","createMetric","metricType","value","data","parseFloat","toFixed","JSON","stringify","walkDOM","node","func","firstChild","nextSibling","getFullNamePart","fullName","val","arr","split","CustomEvent","event","params","bubbles","cancelable","detail","evt","document","createEvent","initCustomEvent","prototype","Event","MezzuriteMeasure","PerformanceTimingService","measure","maxComponentEndTime","startEntry","endEntry","componentTitle","performance","getEntriesByName","startTime","renderStartEntry","endTime","responseEnd","mountDuration","totalDuration","nameArr","id","untilMount","clt","slowResource","push","getMeasuresByName","result","getMeasureById","getMeasureByNameAndId","getCurrentComponents","filter","m","getCurrentComponentsLookup","components","calculateVlt","maxComponent","vltComponents","vltLookup","clearMarks","vlt","getElNames","el","tagName","src","calculateSlowestResource","resources","getEntriesByType","r","initiatorType","currentResources","j","calculateSlowestResourceBatch","slow","elementDict","PerformanceTelemetryService","startCaptureCycle","window","now","captureTimer","setTimeout","captureTimings","isRedirect","clearTimeout","submitTelemetry","timings","altMeasure","vltResults","log","Timings","Framework","packageName","version","packageVersion","ViewportWidth","viewportWidth","ViewportHeight","viewportHeight","ObjectVersion","location","href","console","EventElement","dispatchEvent","compatibilityCheck","isCompatible","PerfMetric"],"mappings":"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","file":"mezzurite-core.umd.min.js.map","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * Global Mezzurite constants\r\n */\r\nconst MezzuriteConstants = {\r\n    mezzuriteObjectVersion: '1.0.0',\r\n    captureCycleTimeout: 10000,\r\n    slowestResourceTimeout: 4000,\r\n    idLength: 6,\r\n    domAttributeName: 'perf-id',\r\n    measureNamePrefix: 'mz',\r\n    altName: 'ALT',\r\n    vltName: 'VLT',\r\n    fvltName: 'FVLT',\r\n    vltMarkStart: 'VltStart',\r\n    altMarkStart: 'AltStart',\r\n    altMarkEnd: 'AltEnd',\r\n    componentMarkStart: 'ComponentStart',\r\n    componentMarkEnd: 'ComponentEnd',\r\n    componentMarkRenderStart: 'ComponentRenderStart',\r\n    jsllConfigName: 'jsll',\r\n    versionName: 'MezzuriteVersion',\r\n    allComponents: 'AllComponents',\r\n    redirect: 'Redirect',\r\n    sessionData: 'MezzuriteSession',\r\n    fullNamePartTitle: 'title',\r\n    fullNamePartKey: 'key',\r\n    unsupportedBrowserName: 'unsupportedBrowser',\r\n    unsupportedBrowserPerf: 'This was sent from a client using a browser that does not support the Performance API'\r\n};\r\n\r\nexport { MezzuriteConstants };","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * Global Mezzurite object\r\n */\r\nexport class MezzuriteObject {\r\n    firstViewLoaded: boolean;\r\n    captureCycleStarted: boolean;\r\n    routerPerf: boolean;\r\n    measures: object;\r\n    defaultLogs: object;\r\n    childElementNames: object;\r\n    slowestResource: object;\r\n    currentComponents: object;\r\n    vltComponentLookup: object;\r\n    elementLookup: object;\r\n\r\n    constructor() {\r\n        this.firstViewLoaded = false;\r\n        this.captureCycleStarted = false;\r\n        this.routerPerf = false;\r\n        this.measures = [];\r\n        this.defaultLogs = [];\r\n        this.childElementNames = {};\r\n        this.slowestResource = {};\r\n        this.currentComponents = {};\r\n        this.vltComponentLookup = {};\r\n        this.elementLookup = {};\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {MezzuriteObject} from '../utils/performance-global';\r\nimport {MezzuriteConstants} from '../utils/performance-constants';\r\n\r\n/**\r\n * Class of utility functions for Mezzurite\r\n */\r\nexport class MezzuriteUtils {\r\n    constructor() { }\r\n\r\n    /**\r\n     * Adds default values for MezzuriteObject to the global window.mezzurite object\r\n     * @param obj existing mezzurite global object (if already created by logger)\r\n     */\r\n    static createMezzuriteObject(obj: any): void {\r\n        this.addCustomEventPolyfill();\r\n        const mzObj = new MezzuriteObject();\r\n        for (const prop in mzObj) {\r\n            if (obj[prop] === undefined) {\r\n                obj[prop] = (<any>mzObj)[prop];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets certain properties in window.mezzurite after capture cycle is completed\r\n     */\r\n    static testReset(): void {\r\n        const obj = (<any>window).mezzurite;\r\n        obj.childElementNames = {};\r\n        obj.slowestResource = {};\r\n        obj.currentComponents = {};\r\n        obj.vltComponentLookup = {};\r\n        obj.elementLookup = {};\r\n        (<any>window).mezzurite = obj;\r\n    }\r\n\r\n    /**\r\n     * Creates a unique alpha-numeric key\r\n     */\r\n    static makeId(): string {\r\n        let text = '';\r\n        const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        for (let i = 0; i < MezzuriteConstants.idLength; i++) {\r\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n        }\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Gets string name of the given function\r\n     * @param fun function\r\n     */\r\n    static getFunctionName(fun: any): string {\r\n        let ret = fun.toString();\r\n        ret = ret.substr('function '.length);\r\n        ret = ret.substr(0, ret.indexOf('('));\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets name of a given component passed into Mezzurite HOC\r\n     * @param WrappedComponent Component\r\n     */\r\n    static getDisplayName(WrappedComponent: any): any {\r\n        if (WrappedComponent.name !== undefined) {\r\n            return WrappedComponent.name;\r\n        }\r\n        return MezzuriteUtils.getFunctionName(WrappedComponent);\r\n    }\r\n\r\n    /**\r\n     * Gets complete name consisting of prefix, component name, and unique key.\r\n     * @param name component name\r\n     * @param key unique key\r\n     * @param clarifier optional clarifier\r\n     */\r\n    static getName(name: string, key: string): string {\r\n        return MezzuriteConstants.measureNamePrefix + ';' + name + ';' + key;\r\n    }\r\n\r\n    /**\r\n     * Creates metric to save to global mezzurite object\r\n     * @param metricType metric type\r\n     * @param value measured value\r\n     * @param data json metadata\r\n     */\r\n    static createMetric(metricType: string, value: number, data: any = null): any {\r\n        const obj: any = {\r\n            metricType: metricType,\r\n            value: value % 1 !== 0 ? parseFloat(value.toFixed(1)) : value\r\n        };\r\n        if (data !== null) {\r\n            obj.data = JSON.stringify(data);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * Walks DOM of a given element\r\n     * @param node DOM node\r\n     * @param key unique identifier\r\n     * @param func callback function\r\n     */\r\n    static walkDOM(node: any, key: string, func: any) {\r\n        func(node, key);\r\n        node = node.firstChild;\r\n        while (node) {\r\n            MezzuriteUtils.walkDOM(node, key, func);\r\n            node = node.nextSibling;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets fragment from full name\r\n     * @param fullName full name\r\n     * @param val value to pull\r\n     */\r\n    static getFullNamePart(fullName: string, val: string) {\r\n        const arr = fullName.split(';');\r\n        switch (val) {\r\n            case MezzuriteConstants.fullNamePartTitle:\r\n            return arr[1];\r\n            case MezzuriteConstants.fullNamePartKey:\r\n            return arr[2];\r\n            default:\r\n            return fullName;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Polyfill that adds CustomEvent for IE usage\r\n     */\r\n    static addCustomEventPolyfill() {\r\n        if ( typeof (<any>window).CustomEvent === 'function' ) {\r\n            return false;\r\n        }\r\n\r\n        function CustomEvent ( event: string, params: any ) {\r\n          params = params || { bubbles: false, cancelable: false, detail: undefined };\r\n          const evt = document.createEvent( 'CustomEvent' );\r\n          evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\r\n          return evt;\r\n         }\r\n\r\n        CustomEvent.prototype = (<any>window).Event.prototype;\r\n        (<any>window).CustomEvent = CustomEvent;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * Mezzurite Measure\r\n */\r\nexport class MezzuriteMeasure {\r\n    name: string;\r\n    id: string;\r\n    startTime: number;\r\n    endTime: number;\r\n    untilMount: number;\r\n    clt: number;\r\n    slowResource: object;\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { MezzuriteConstants } from '../utils/performance-constants';\r\nimport { MezzuriteUtils } from './performance-utils.service';\r\nimport { MezzuriteMeasure } from '../utils/performance-measure';\r\n\r\n/**\r\n * Class containing core timing functions\r\n */\r\nexport class PerformanceTimingService {\r\n    /**\r\n     * Creates measure object from given set of performance marks\r\n     * @param name full semicolon delimited name\r\n     * @param slowestResource Slowest resource inside component\r\n     * @param maxComponentEndTime Max component end time (if VLT)\r\n     */\r\n    static measure(name: string, slowestResource: any = null, maxComponentEndTime: any = null): void {\r\n        let startEntry;\r\n        let endEntry;\r\n\r\n        const componentTitle = MezzuriteUtils.getFullNamePart(name, MezzuriteConstants.fullNamePartTitle);\r\n\r\n        const key = MezzuriteUtils.getFullNamePart(name, MezzuriteConstants.fullNamePartKey);\r\n        if (name === undefined) {\r\n            return;\r\n        }\r\n        if (componentTitle === MezzuriteConstants.altName) {\r\n            // ALT\r\n            endEntry = performance.getEntriesByName(MezzuriteConstants.altMarkEnd)[0];\r\n        } else if (componentTitle === MezzuriteConstants.vltName) {\r\n            // VLT\r\n            startEntry = performance.getEntriesByName(MezzuriteConstants.vltMarkStart)[0];\r\n            endEntry = {\r\n                startTime: maxComponentEndTime\r\n            };\r\n        } else {\r\n            // Component\r\n            startEntry = performance.getEntriesByName(key + MezzuriteConstants.componentMarkStart)[0];\r\n            endEntry = performance.getEntriesByName(key + MezzuriteConstants.componentMarkEnd)[0];\r\n        }\r\n        // start time inside render hook\r\n        const renderStartEntry = performance.getEntriesByName(key + MezzuriteConstants.componentMarkRenderStart)[0];\r\n        const startTime = startEntry !== undefined ? startEntry.startTime : 0;\r\n        let endTime: number = endEntry.startTime;\r\n\r\n        // reset end time to end of slowest resource if\r\n        if (slowestResource !== null && slowestResource.responseEnd > endTime) {\r\n            endTime = slowestResource.responseEnd;\r\n        }\r\n\r\n        const mountDuration = endEntry.startTime - startTime;\r\n        const totalDuration = endTime - startTime;\r\n        const nameArr = name.split(';');\r\n\r\n        const obj = new MezzuriteMeasure();\r\n        obj.name = nameArr[1];\r\n        obj.id = nameArr[2];\r\n        obj.startTime = startTime % 1 !== 0 ? parseFloat(startTime.toFixed(1)) : startTime;\r\n        obj.endTime = parseFloat(endTime.toFixed(1));\r\n        obj.untilMount = parseFloat(mountDuration.toFixed(1));\r\n        obj.clt = parseFloat(totalDuration.toFixed(1));\r\n        obj.slowResource = {};\r\n\r\n        if (slowestResource && slowestResource.responseEnd >= startTime) {\r\n            (<any>obj).slowResource['endTime'] = parseFloat(slowestResource.responseEnd.toFixed(1));\r\n            (<any>obj).slowResource['name'] = slowestResource.name;\r\n        } else if (slowestResource !== null) {\r\n            (<any>obj).slowResource['endTime'] = -1;\r\n            (<any>obj).slowResource['name'] = slowestResource.name;\r\n        }\r\n\r\n        if (componentTitle !== MezzuriteConstants.altName && componentTitle !== MezzuriteConstants.vltName && renderStartEntry) {\r\n            (<any>obj)['renderStartTime'] = renderStartEntry.startTime;\r\n        }\r\n\r\n        (<any>window).mezzurite.measures.push(obj);\r\n    }\r\n\r\n    /**\r\n     * Gets measures by name\r\n     * @param name name\r\n     */\r\n    static getMeasuresByName(name: string) {\r\n        const result: any[] = [];\r\n        if (name === undefined || name === null) {\r\n            return null;\r\n        }\r\n        const measures = (<any>window).mezzurite.measures;\r\n        for (let i = 0; i < measures.length; i++) {\r\n            if (name === measures[i].name) {\r\n                result.push(measures[i]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n        /**\r\n     * Gets a specific measure by id\r\n     * @param id id\r\n     */\r\n    static getMeasureById(id: number) {\r\n        if (id === undefined || id === null) {\r\n            return null;\r\n        }\r\n        const measures = (<any>window).mezzurite.measures;\r\n        for (let i = 0; i < measures.length; i++) {\r\n            if (id === measures[i].id) {\r\n                return measures[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n            /**\r\n     * Gets a specific measure by name and id\r\n     * @param name name\r\n     * @param id id\r\n     */\r\n    static getMeasureByNameAndId(name: string, id: number) {\r\n        if (name === undefined || name === null || id === undefined || id === null) {\r\n            return null;\r\n        }\r\n        const measures = (<any>window).mezzurite.measures;\r\n        for (let i = 0; i < measures.length; i++) {\r\n            if (name === measures[i].name && id === measures[i].id) {\r\n                return measures[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets current components from a given capture cycle\r\n     */\r\n    static getCurrentComponents() {\r\n        const components = (<any>window).mezzurite.measures.filter((m: any) =>\r\n            m.name.indexOf(MezzuriteConstants.measureNamePrefix + ';' + MezzuriteConstants.altName) === -1 &&\r\n            m.name.indexOf(MezzuriteConstants.measureNamePrefix + ';' + MezzuriteConstants.vltName) === -1 &&\r\n            m.startTime >= (<any>window).mezzurite.startTime &&\r\n            m.startTime <= (<any>window).mezzurite.endTime\r\n        );\r\n        return components;\r\n    }\r\n\r\n    /**\r\n     * Gets lookup object of current components\r\n     */\r\n    static getCurrentComponentsLookup() {\r\n        const components = (<any>window).mezzurite.measures.filter((m: any) =>\r\n            m.name.indexOf(MezzuriteConstants.measureNamePrefix + ';' + MezzuriteConstants.altName) === -1 &&\r\n            m.name.indexOf(MezzuriteConstants.measureNamePrefix + ';' + MezzuriteConstants.vltName) === -1 &&\r\n            m.startTime >= (<any>window).mezzurite.startTime &&\r\n            m.startTime <= (<any>window).mezzurite.endTime\r\n        );\r\n        const obj: any = {};\r\n        for (let i = 0; i < components.length; i++) {\r\n            obj[MezzuriteConstants.measureNamePrefix + ';' + components[i].name + ';' + components[i].id] = components[i];\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * Calculates viewport load time\r\n     */\r\n    static calculateVlt() {\r\n        let maxComponent = null;\r\n        let maxEndTime = 0;\r\n        const vltComponents: any[] = [];\r\n        const components: any = this.getCurrentComponentsLookup();\r\n        const vltLookup = (<any>window).mezzurite.vltComponentLookup;\r\n        let measure;\r\n        for (const key in vltLookup) {\r\n            if (components[key] && vltLookup[key] === true) {\r\n                vltComponents.push(components[key]);\r\n                if (maxComponent !== null) {\r\n                    let slowestResourceEnd = 0;\r\n                    const slowestResource = (<any>window).mezzurite.slowestResource[key];\r\n                    if (slowestResource !== undefined && slowestResource !== null) {\r\n                        slowestResourceEnd = slowestResource.responseEnd;\r\n                    }\r\n                    const maxLast = maxComponent.clt + maxComponent.startTime;\r\n                    const currLast = components[key].clt + components[key].startTime;\r\n                    if (currLast > maxLast) {\r\n                        maxComponent = components[key];\r\n                        maxEndTime = currLast;\r\n                    }\r\n                } else {\r\n                    maxComponent = components[key];\r\n                }\r\n            }\r\n        }\r\n        if (maxComponent !== null) {\r\n            const fullName = MezzuriteConstants.measureNamePrefix + ';' + MezzuriteConstants.vltName + ';' + maxComponent.id;\r\n            this.measure(fullName, null, maxComponent.endTime);\r\n            measure = this.getMeasureByNameAndId(MezzuriteConstants.vltName, maxComponent.id);\r\n            performance.clearMarks(MezzuriteConstants.vltMarkStart);\r\n        } else {\r\n            return null;\r\n            // no components in view\r\n        }\r\n        return {\r\n            vlt: measure.clt,\r\n            components: vltComponents\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates sub-element lookup object on global mezzurite object\r\n     * @param el\r\n     * @param key\r\n     */\r\n    static getElNames(el: any, key: string) {\r\n        if ((<any>window).mezzurite.childElementNames[key] === undefined) {\r\n            (<any>window).mezzurite.childElementNames[key] = [];\r\n        }\r\n        if (el.tagName === 'IMG') {\r\n            (<any>window).mezzurite.childElementNames[key].push(el.src);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates slowest resource within a given component element\r\n     * @param el parent element\r\n     * @param fullName component fullname\r\n     */\r\n    static calculateSlowestResource(el: any, fullName: string) {\r\n        const key = MezzuriteUtils.getFullNamePart(fullName, MezzuriteConstants.fullNamePartKey);\r\n        let slowestResource = null;\r\n        MezzuriteUtils.walkDOM(el, key, this.getElNames);\r\n\r\n        const resources: any = performance.getEntriesByType('resource').filter((r: any) => (<any>r).initiatorType === 'img');\r\n        const currentResources = (<any>window).mezzurite.childElementNames[key];\r\n        if (resources.length === 0) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < currentResources.length; i++) {\r\n            for (let j = 0; j < resources.length; j++) {\r\n                if (currentResources[i] === resources[j].name &&\r\n                   (slowestResource === null || resources[j].responseEnd > slowestResource.responseEnd)) {\r\n                        slowestResource = resources[j];\r\n                }\r\n            }\r\n        }\r\n        (<any>window).mezzurite.slowestResource[fullName] = slowestResource;\r\n        return slowestResource;\r\n    }\r\n\r\n    static calculateSlowestResourceBatch() {\r\n        let slow;\r\n        const elementDict = (<any>window).mezzurite.elementLookup;\r\n        for (const prop in elementDict) {\r\n            slow = this.calculateSlowestResource(elementDict[prop], prop);\r\n            if (slow === null) {\r\n                PerformanceTimingService.measure(prop);\r\n            } else {\r\n                PerformanceTimingService.measure(prop, slow);\r\n            }\r\n        }\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { MezzuriteConstants } from '../utils/performance-constants';\r\nimport { PerformanceTimingService } from './performance-timing.service';\r\nimport { MezzuriteUtils } from './performance-utils.service';\r\n\r\n/**\r\n * Class containing core telemetry functions\r\n */\r\nexport class PerformanceTelemetryService {\r\n    /**\r\n     * Starts capture cycle period\r\n     */\r\n    static startCaptureCycle() {\r\n        if (!(<any>window).mezzurite.captureCycleStarted) {\r\n            (<any>window).mezzurite.startTime = window.performance.now();\r\n            (<any>window).mezzurite.captureCycleStarted = true;\r\n            (<any>window).mezzurite.captureTimer = setTimeout(function() {\r\n                PerformanceTelemetryService.captureTimings();\r\n            }, MezzuriteConstants.captureCycleTimeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Captures timings for the given period\r\n     * @param isRedirect Bool dictating whether timings were captured at end of cycle or early\r\n     */\r\n    static captureTimings(isRedirect = false) {\r\n        clearTimeout((<any>window).mezzurite.captureTimer);\r\n        (<any>window).mezzurite.endTime = window.performance.now();\r\n        if (!(<any>window).mezzurite.captureCycleStarted) {\r\n            (<any>window).mezzurite.captureCycleStarted = true;\r\n        }\r\n        PerformanceTelemetryService.submitTelemetry(isRedirect);\r\n        (<any>window).mezzurite.captureCycleStarted = false;\r\n    }\r\n\r\n    /**\r\n     * Creates timings object to send to telemetry\r\n     * @param isRedirect isRedirect bool\r\n     */\r\n    static submitTelemetry(isRedirect: boolean): void {\r\n        const timings: any[] = [];\r\n        // add redirect value\r\n        timings.push(MezzuriteUtils.createMetric(MezzuriteConstants.redirect, isRedirect === false ? 0 : 1));\r\n\r\n        // calculate component measures off slowest resource values\r\n        if ((<any>window).mezzurite.elementLookup !== {}) {\r\n            PerformanceTimingService.calculateSlowestResourceBatch();\r\n        }\r\n        // all components\r\n        const components = PerformanceTimingService.getCurrentComponents();\r\n        if ((<any>window).mezzurite.routerPerf) {\r\n            // alt\r\n            if ((<any>window).mezzurite.firstViewLoaded === false) {\r\n                const altMeasure = (<any>window).mezzurite.measures.filter((m: any) => m.name.indexOf(MezzuriteConstants.altName) > -1)[0];\r\n                timings.push(MezzuriteUtils.createMetric(MezzuriteConstants.altName, altMeasure.clt));\r\n                (<any>window).mezzurite.firstViewLoaded = true;\r\n            }\r\n            // vlt\r\n            if (components.length > 0) {\r\n                const vltResults = PerformanceTimingService.calculateVlt();\r\n                if (vltResults !== null) {\r\n                    timings.push(MezzuriteUtils.createMetric(MezzuriteConstants.vltName, vltResults.vlt, vltResults.components));\r\n                }\r\n            }\r\n            if (components.length === 0) {\r\n                performance.clearMarks(MezzuriteConstants.vltMarkStart);\r\n            }\r\n        }\r\n        if (components.length > 0) {\r\n            timings.push(MezzuriteUtils.createMetric(MezzuriteConstants.allComponents, -1, components));\r\n        }\r\n        this.log(timings);\r\n        MezzuriteUtils.testReset();\r\n    }\r\n\r\n    /**\r\n     * Adds remaining metadata to send to logger and dispatches event\r\n     * @param timings\r\n     */\r\n    static log(timings: any) {\r\n        if ((<any>window).mezzurite) {\r\n            if (timings.length > 1) {\r\n                const obj = {\r\n                    Timings: timings,\r\n                    Framework: {\r\n                        name: (<any>window).mezzurite.packageName,\r\n                        version: (<any>window).mezzurite.packageVersion\r\n                    },\r\n                    ViewportWidth: (<any>window).mezzurite.viewportWidth,\r\n                    ViewportHeight: (<any>window).mezzurite.viewportHeight,\r\n                    ObjectVersion: MezzuriteConstants.mezzuriteObjectVersion\r\n                };\r\n                // log to console when developing locally\r\n                if ((<any>window).location.href.indexOf('localhost') > -1) {\r\n                    console.log('to log for testing: ', obj);\r\n                }\r\n                if ((<any>window).mezzurite.EventElement) {\r\n                    (<any>window).mezzurite.EventElement.dispatchEvent(new CustomEvent('Timing', {detail: obj}));\r\n                }\r\n            } else {\r\n                console.log('nothing for Mezzurite to log.');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether window.performance is undefined\r\n     */\r\n    static compatibilityCheck() {\r\n        const isCompatible = (window.performance !== undefined);\r\n        if (!isCompatible) {\r\n                const timings = [\r\n                   MezzuriteUtils.createMetric(MezzuriteConstants.unsupportedBrowserName,\r\n                   -1,\r\n                   MezzuriteConstants.unsupportedBrowserPerf)\r\n                ];\r\n            this.log(timings);\r\n        }\r\n        return isCompatible;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * Class for a given performance metric\r\n */\r\nexport class PerfMetric {\r\n    metricType: string;\r\n    value: number;\r\n    data?: object;\r\n}"]}