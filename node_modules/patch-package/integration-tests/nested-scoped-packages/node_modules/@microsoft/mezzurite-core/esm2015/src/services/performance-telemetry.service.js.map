{"version":3,"file":"performance-telemetry.service.js","sourceRoot":"","sources":["../../package/src/services/performance-telemetry.service.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { MezzuriteConstants } from '../utils/performance-constants';\r\nimport { PerformanceTimingService } from './performance-timing.service';\r\nimport { MezzuriteUtils } from './performance-utils.service';\r\n\r\n/**\r\n * Class containing core telemetry functions\r\n */\r\nexport class PerformanceTelemetryService {\r\n    /**\r\n     * Starts capture cycle period\r\n     */\r\n    static startCaptureCycle() {\r\n        if (!(<any>window).mezzurite.captureCycleStarted) {\r\n            (<any>window).mezzurite.startTime = window.performance.now();\r\n            (<any>window).mezzurite.captureCycleStarted = true;\r\n            (<any>window).mezzurite.captureTimer = setTimeout(function() {\r\n                PerformanceTelemetryService.captureTimings();\r\n            }, MezzuriteConstants.captureCycleTimeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Captures timings for the given period\r\n     * @param isRedirect Bool dictating whether timings were captured at end of cycle or early\r\n     */\r\n    static captureTimings(isRedirect = false) {\r\n        clearTimeout((<any>window).mezzurite.captureTimer);\r\n        (<any>window).mezzurite.endTime = window.performance.now();\r\n        if (!(<any>window).mezzurite.captureCycleStarted) {\r\n            (<any>window).mezzurite.captureCycleStarted = true;\r\n        }\r\n        PerformanceTelemetryService.submitTelemetry(isRedirect);\r\n        (<any>window).mezzurite.captureCycleStarted = false;\r\n    }\r\n\r\n    /**\r\n     * Creates timings object to send to telemetry\r\n     * @param isRedirect isRedirect bool\r\n     */\r\n    static submitTelemetry(isRedirect: boolean): void {\r\n        const timings: any[] = [];\r\n        // add redirect value\r\n        timings.push(MezzuriteUtils.createMetric(MezzuriteConstants.redirect, isRedirect === false ? 0 : 1));\r\n\r\n        // calculate component measures off slowest resource values\r\n        if ((<any>window).mezzurite.elementLookup !== {}) {\r\n            PerformanceTimingService.calculateSlowestResourceBatch();\r\n        }\r\n        // all components\r\n        const components = PerformanceTimingService.getCurrentComponents();\r\n        if ((<any>window).mezzurite.routerPerf) {\r\n            // alt\r\n            if ((<any>window).mezzurite.firstViewLoaded === false) {\r\n                const altMeasure = (<any>window).mezzurite.measures.filter((m: any) => m.name.indexOf(MezzuriteConstants.altName) > -1)[0];\r\n                timings.push(MezzuriteUtils.createMetric(MezzuriteConstants.altName, altMeasure.clt));\r\n                (<any>window).mezzurite.firstViewLoaded = true;\r\n            }\r\n            // vlt\r\n            if (components.length > 0) {\r\n                const vltResults = PerformanceTimingService.calculateVlt();\r\n                if (vltResults !== null) {\r\n                    timings.push(MezzuriteUtils.createMetric(MezzuriteConstants.vltName, vltResults.vlt, vltResults.components));\r\n                }\r\n            }\r\n            if (components.length === 0) {\r\n                performance.clearMarks(MezzuriteConstants.vltMarkStart);\r\n            }\r\n        }\r\n        if (components.length > 0) {\r\n            timings.push(MezzuriteUtils.createMetric(MezzuriteConstants.allComponents, -1, components));\r\n        }\r\n        this.log(timings);\r\n        MezzuriteUtils.testReset();\r\n    }\r\n\r\n    /**\r\n     * Adds remaining metadata to send to logger and dispatches event\r\n     * @param timings\r\n     */\r\n    static log(timings: any) {\r\n        if ((<any>window).mezzurite) {\r\n            if (timings.length > 1) {\r\n                const obj = {\r\n                    Timings: timings,\r\n                    Framework: {\r\n                        name: (<any>window).mezzurite.packageName,\r\n                        version: (<any>window).mezzurite.packageVersion\r\n                    },\r\n                    ViewportWidth: (<any>window).mezzurite.viewportWidth,\r\n                    ViewportHeight: (<any>window).mezzurite.viewportHeight,\r\n                    ObjectVersion: MezzuriteConstants.mezzuriteObjectVersion\r\n                };\r\n                // log to console when developing locally\r\n                if ((<any>window).location.href.indexOf('localhost') > -1) {\r\n                    console.log('to log for testing: ', obj);\r\n                }\r\n                if ((<any>window).mezzurite.EventElement) {\r\n                    (<any>window).mezzurite.EventElement.dispatchEvent(new CustomEvent('Timing', {detail: obj}));\r\n                }\r\n            } else {\r\n                console.log('nothing for Mezzurite to log.');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether window.performance is undefined\r\n     */\r\n    static compatibilityCheck() {\r\n        const isCompatible = (window.performance !== undefined);\r\n        if (!isCompatible) {\r\n                const timings = [\r\n                   MezzuriteUtils.createMetric(MezzuriteConstants.unsupportedBrowserName,\r\n                   -1,\r\n                   MezzuriteConstants.unsupportedBrowserPerf)\r\n                ];\r\n            this.log(timings);\r\n        }\r\n        return isCompatible;\r\n    }\r\n}"]}