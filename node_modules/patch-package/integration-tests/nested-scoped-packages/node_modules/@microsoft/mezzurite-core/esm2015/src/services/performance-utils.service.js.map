{"version":3,"file":"performance-utils.service.js","sourceRoot":"","sources":["../../package/src/services/performance-utils.service.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {MezzuriteObject} from '../utils/performance-global';\r\nimport {MezzuriteConstants} from '../utils/performance-constants';\r\n\r\n/**\r\n * Class of utility functions for Mezzurite\r\n */\r\nexport class MezzuriteUtils {\r\n    constructor() { }\r\n\r\n    /**\r\n     * Adds default values for MezzuriteObject to the global window.mezzurite object\r\n     * @param obj existing mezzurite global object (if already created by logger)\r\n     */\r\n    static createMezzuriteObject(obj: any): void {\r\n        this.addCustomEventPolyfill();\r\n        const mzObj = new MezzuriteObject();\r\n        for (const prop in mzObj) {\r\n            if (obj[prop] === undefined) {\r\n                obj[prop] = (<any>mzObj)[prop];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets certain properties in window.mezzurite after capture cycle is completed\r\n     */\r\n    static testReset(): void {\r\n        const obj = (<any>window).mezzurite;\r\n        obj.childElementNames = {};\r\n        obj.slowestResource = {};\r\n        obj.currentComponents = {};\r\n        obj.vltComponentLookup = {};\r\n        obj.elementLookup = {};\r\n        (<any>window).mezzurite = obj;\r\n    }\r\n\r\n    /**\r\n     * Creates a unique alpha-numeric key\r\n     */\r\n    static makeId(): string {\r\n        let text = '';\r\n        const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        for (let i = 0; i < MezzuriteConstants.idLength; i++) {\r\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n        }\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Gets string name of the given function\r\n     * @param fun function\r\n     */\r\n    static getFunctionName(fun: any): string {\r\n        let ret = fun.toString();\r\n        ret = ret.substr('function '.length);\r\n        ret = ret.substr(0, ret.indexOf('('));\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets name of a given component passed into Mezzurite HOC\r\n     * @param WrappedComponent Component\r\n     */\r\n    static getDisplayName(WrappedComponent: any): any {\r\n        if (WrappedComponent.name !== undefined) {\r\n            return WrappedComponent.name;\r\n        }\r\n        return MezzuriteUtils.getFunctionName(WrappedComponent);\r\n    }\r\n\r\n    /**\r\n     * Gets complete name consisting of prefix, component name, and unique key.\r\n     * @param name component name\r\n     * @param key unique key\r\n     * @param clarifier optional clarifier\r\n     */\r\n    static getName(name: string, key: string): string {\r\n        return MezzuriteConstants.measureNamePrefix + ';' + name + ';' + key;\r\n    }\r\n\r\n    /**\r\n     * Creates metric to save to global mezzurite object\r\n     * @param metricType metric type\r\n     * @param value measured value\r\n     * @param data json metadata\r\n     */\r\n    static createMetric(metricType: string, value: number, data: any = null): any {\r\n        const obj: any = {\r\n            metricType: metricType,\r\n            value: value % 1 !== 0 ? parseFloat(value.toFixed(1)) : value\r\n        };\r\n        if (data !== null) {\r\n            obj.data = JSON.stringify(data);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * Walks DOM of a given element\r\n     * @param node DOM node\r\n     * @param key unique identifier\r\n     * @param func callback function\r\n     */\r\n    static walkDOM(node: any, key: string, func: any) {\r\n        func(node, key);\r\n        node = node.firstChild;\r\n        while (node) {\r\n            MezzuriteUtils.walkDOM(node, key, func);\r\n            node = node.nextSibling;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets fragment from full name\r\n     * @param fullName full name\r\n     * @param val value to pull\r\n     */\r\n    static getFullNamePart(fullName: string, val: string) {\r\n        const arr = fullName.split(';');\r\n        switch (val) {\r\n            case MezzuriteConstants.fullNamePartTitle:\r\n            return arr[1];\r\n            case MezzuriteConstants.fullNamePartKey:\r\n            return arr[2];\r\n            default:\r\n            return fullName;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Polyfill that adds CustomEvent for IE usage\r\n     */\r\n    static addCustomEventPolyfill() {\r\n        if ( typeof (<any>window).CustomEvent === 'function' ) {\r\n            return false;\r\n        }\r\n\r\n        function CustomEvent ( event: string, params: any ) {\r\n          params = params || { bubbles: false, cancelable: false, detail: undefined };\r\n          const evt = document.createEvent( 'CustomEvent' );\r\n          evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\r\n          return evt;\r\n         }\r\n\r\n        CustomEvent.prototype = (<any>window).Event.prototype;\r\n        (<any>window).CustomEvent = CustomEvent;\r\n    }\r\n}"]}