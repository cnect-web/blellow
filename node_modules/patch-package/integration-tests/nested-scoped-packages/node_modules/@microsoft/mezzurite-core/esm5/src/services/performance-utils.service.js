/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import { MezzuriteObject } from '../utils/performance-global';
import { MezzuriteConstants } from '../utils/performance-constants';
/**
 * Class of utility functions for Mezzurite
 */
var /**
 * Class of utility functions for Mezzurite
 */
MezzuriteUtils = /** @class */ (function () {
    function MezzuriteUtils() {
    }
    /**
     * Adds default values for MezzuriteObject to the global window.mezzurite object
     * @param obj existing mezzurite global object (if already created by logger)
     */
    /**
     * Adds default values for MezzuriteObject to the global window.mezzurite object
     * @param {?} obj existing mezzurite global object (if already created by logger)
     * @return {?}
     */
    MezzuriteUtils.createMezzuriteObject = /**
     * Adds default values for MezzuriteObject to the global window.mezzurite object
     * @param {?} obj existing mezzurite global object (if already created by logger)
     * @return {?}
     */
    function (obj) {
        this.addCustomEventPolyfill();
        /** @type {?} */
        var mzObj = new MezzuriteObject();
        for (var prop in mzObj) {
            if (obj[prop] === undefined) {
                obj[prop] = (/** @type {?} */ (mzObj))[prop];
            }
        }
    };
    /**
     * Resets certain properties in window.mezzurite after capture cycle is completed
     */
    /**
     * Resets certain properties in window.mezzurite after capture cycle is completed
     * @return {?}
     */
    MezzuriteUtils.testReset = /**
     * Resets certain properties in window.mezzurite after capture cycle is completed
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = (/** @type {?} */ (window)).mezzurite;
        obj.childElementNames = {};
        obj.slowestResource = {};
        obj.currentComponents = {};
        obj.vltComponentLookup = {};
        obj.elementLookup = {};
        (/** @type {?} */ (window)).mezzurite = obj;
    };
    /**
     * Creates a unique alpha-numeric key
     */
    /**
     * Creates a unique alpha-numeric key
     * @return {?}
     */
    MezzuriteUtils.makeId = /**
     * Creates a unique alpha-numeric key
     * @return {?}
     */
    function () {
        /** @type {?} */
        var text = '';
        /** @type {?} */
        var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        for (var i = 0; i < MezzuriteConstants.idLength; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    };
    /**
     * Gets string name of the given function
     * @param fun function
     */
    /**
     * Gets string name of the given function
     * @param {?} fun function
     * @return {?}
     */
    MezzuriteUtils.getFunctionName = /**
     * Gets string name of the given function
     * @param {?} fun function
     * @return {?}
     */
    function (fun) {
        /** @type {?} */
        var ret = fun.toString();
        ret = ret.substr('function '.length);
        ret = ret.substr(0, ret.indexOf('('));
        return ret;
    };
    /**
     * Gets name of a given component passed into Mezzurite HOC
     * @param WrappedComponent Component
     */
    /**
     * Gets name of a given component passed into Mezzurite HOC
     * @param {?} WrappedComponent Component
     * @return {?}
     */
    MezzuriteUtils.getDisplayName = /**
     * Gets name of a given component passed into Mezzurite HOC
     * @param {?} WrappedComponent Component
     * @return {?}
     */
    function (WrappedComponent) {
        if (WrappedComponent.name !== undefined) {
            return WrappedComponent.name;
        }
        return MezzuriteUtils.getFunctionName(WrappedComponent);
    };
    /**
     * Gets complete name consisting of prefix, component name, and unique key.
     * @param name component name
     * @param key unique key
     * @param clarifier optional clarifier
     */
    /**
     * Gets complete name consisting of prefix, component name, and unique key.
     * @param {?} name component name
     * @param {?} key unique key
     * @return {?}
     */
    MezzuriteUtils.getName = /**
     * Gets complete name consisting of prefix, component name, and unique key.
     * @param {?} name component name
     * @param {?} key unique key
     * @return {?}
     */
    function (name, key) {
        return MezzuriteConstants.measureNamePrefix + ';' + name + ';' + key;
    };
    /**
     * Creates metric to save to global mezzurite object
     * @param metricType metric type
     * @param value measured value
     * @param data json metadata
     */
    /**
     * Creates metric to save to global mezzurite object
     * @param {?} metricType metric type
     * @param {?} value measured value
     * @param {?=} data json metadata
     * @return {?}
     */
    MezzuriteUtils.createMetric = /**
     * Creates metric to save to global mezzurite object
     * @param {?} metricType metric type
     * @param {?} value measured value
     * @param {?=} data json metadata
     * @return {?}
     */
    function (metricType, value, data) {
        if (data === void 0) { data = null; }
        /** @type {?} */
        var obj = {
            metricType: metricType,
            value: value % 1 !== 0 ? parseFloat(value.toFixed(1)) : value
        };
        if (data !== null) {
            obj.data = JSON.stringify(data);
        }
        return obj;
    };
    /**
     * Walks DOM of a given element
     * @param node DOM node
     * @param key unique identifier
     * @param func callback function
     */
    /**
     * Walks DOM of a given element
     * @param {?} node DOM node
     * @param {?} key unique identifier
     * @param {?} func callback function
     * @return {?}
     */
    MezzuriteUtils.walkDOM = /**
     * Walks DOM of a given element
     * @param {?} node DOM node
     * @param {?} key unique identifier
     * @param {?} func callback function
     * @return {?}
     */
    function (node, key, func) {
        func(node, key);
        node = node.firstChild;
        while (node) {
            MezzuriteUtils.walkDOM(node, key, func);
            node = node.nextSibling;
        }
    };
    /**
     * Gets fragment from full name
     * @param fullName full name
     * @param val value to pull
     */
    /**
     * Gets fragment from full name
     * @param {?} fullName full name
     * @param {?} val value to pull
     * @return {?}
     */
    MezzuriteUtils.getFullNamePart = /**
     * Gets fragment from full name
     * @param {?} fullName full name
     * @param {?} val value to pull
     * @return {?}
     */
    function (fullName, val) {
        /** @type {?} */
        var arr = fullName.split(';');
        switch (val) {
            case MezzuriteConstants.fullNamePartTitle:
                return arr[1];
            case MezzuriteConstants.fullNamePartKey:
                return arr[2];
            default:
                return fullName;
        }
    };
    /**
     * Polyfill that adds CustomEvent for IE usage
     */
    /**
     * Polyfill that adds CustomEvent for IE usage
     * @return {?}
     */
    MezzuriteUtils.addCustomEventPolyfill = /**
     * Polyfill that adds CustomEvent for IE usage
     * @return {?}
     */
    function () {
        if (typeof (/** @type {?} */ (window)).CustomEvent === 'function') {
            return false;
        }
        /**
         * @param {?} event
         * @param {?} params
         * @return {?}
         */
        function CustomEvent(event, params) {
            params = params || { bubbles: false, cancelable: false, detail: undefined };
            /** @type {?} */
            var evt = document.createEvent('CustomEvent');
            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
            return evt;
        }
        CustomEvent.prototype = (/** @type {?} */ (window)).Event.prototype;
        (/** @type {?} */ (window)).CustomEvent = CustomEvent;
    };
    return MezzuriteUtils;
}());
/**
 * Class of utility functions for Mezzurite
 */
export { MezzuriteUtils };
//# sourceMappingURL=performance-utils.service.js.map