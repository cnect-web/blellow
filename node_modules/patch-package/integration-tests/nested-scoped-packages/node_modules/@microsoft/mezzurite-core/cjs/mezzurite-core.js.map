{"version":3,"file":"mezzurite-core.js","sources":["../package/src/utils/performance-constants.ts","../package/src/utils/performance-global.ts","../package/src/services/performance-utils.service.ts","../package/src/utils/performance-measure.ts","../package/src/services/performance-timing.service.ts","../package/src/services/performance-telemetry.service.ts","../package/src/utils/performance-metric.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * Global Mezzurite constants\r\n */\r\nconst MezzuriteConstants = {\r\n    mezzuriteObjectVersion: '1.0.0',\r\n    captureCycleTimeout: 10000,\r\n    slowestResourceTimeout: 4000,\r\n    idLength: 6,\r\n    domAttributeName: 'perf-id',\r\n    measureNamePrefix: 'mz',\r\n    altName: 'ALT',\r\n    vltName: 'VLT',\r\n    fvltName: 'FVLT',\r\n    vltMarkStart: 'VltStart',\r\n    altMarkStart: 'AltStart',\r\n    altMarkEnd: 'AltEnd',\r\n    componentMarkStart: 'ComponentStart',\r\n    componentMarkEnd: 'ComponentEnd',\r\n    componentMarkRenderStart: 'ComponentRenderStart',\r\n    jsllConfigName: 'jsll',\r\n    versionName: 'MezzuriteVersion',\r\n    allComponents: 'AllComponents',\r\n    redirect: 'Redirect',\r\n    sessionData: 'MezzuriteSession',\r\n    fullNamePartTitle: 'title',\r\n    fullNamePartKey: 'key',\r\n    unsupportedBrowserName: 'unsupportedBrowser',\r\n    unsupportedBrowserPerf: 'This was sent from a client using a browser that does not support the Performance API'\r\n};\r\n\r\nexport { MezzuriteConstants };","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * Global Mezzurite object\r\n */\r\nexport class MezzuriteObject {\r\n    firstViewLoaded: boolean;\r\n    captureCycleStarted: boolean;\r\n    routerPerf: boolean;\r\n    measures: object;\r\n    defaultLogs: object;\r\n    childElementNames: object;\r\n    slowestResource: object;\r\n    currentComponents: object;\r\n    vltComponentLookup: object;\r\n    elementLookup: object;\r\n\r\n    constructor() {\r\n        this.firstViewLoaded = false;\r\n        this.captureCycleStarted = false;\r\n        this.routerPerf = false;\r\n        this.measures = [];\r\n        this.defaultLogs = [];\r\n        this.childElementNames = {};\r\n        this.slowestResource = {};\r\n        this.currentComponents = {};\r\n        this.vltComponentLookup = {};\r\n        this.elementLookup = {};\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {MezzuriteObject} from '../utils/performance-global';\r\nimport {MezzuriteConstants} from '../utils/performance-constants';\r\n\r\n/**\r\n * Class of utility functions for Mezzurite\r\n */\r\nexport class MezzuriteUtils {\r\n    constructor() { }\r\n\r\n    /**\r\n     * Adds default values for MezzuriteObject to the global window.mezzurite object\r\n     * @param obj existing mezzurite global object (if already created by logger)\r\n     */\r\n    static createMezzuriteObject(obj: any): void {\r\n        this.addCustomEventPolyfill();\r\n        const mzObj = new MezzuriteObject();\r\n        for (const prop in mzObj) {\r\n            if (obj[prop] === undefined) {\r\n                obj[prop] = (<any>mzObj)[prop];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets certain properties in window.mezzurite after capture cycle is completed\r\n     */\r\n    static testReset(): void {\r\n        const obj = (<any>window).mezzurite;\r\n        obj.childElementNames = {};\r\n        obj.slowestResource = {};\r\n        obj.currentComponents = {};\r\n        obj.vltComponentLookup = {};\r\n        obj.elementLookup = {};\r\n        (<any>window).mezzurite = obj;\r\n    }\r\n\r\n    /**\r\n     * Creates a unique alpha-numeric key\r\n     */\r\n    static makeId(): string {\r\n        let text = '';\r\n        const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        for (let i = 0; i < MezzuriteConstants.idLength; i++) {\r\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n        }\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Gets string name of the given function\r\n     * @param fun function\r\n     */\r\n    static getFunctionName(fun: any): string {\r\n        let ret = fun.toString();\r\n        ret = ret.substr('function '.length);\r\n        ret = ret.substr(0, ret.indexOf('('));\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets name of a given component passed into Mezzurite HOC\r\n     * @param WrappedComponent Component\r\n     */\r\n    static getDisplayName(WrappedComponent: any): any {\r\n        if (WrappedComponent.name !== undefined) {\r\n            return WrappedComponent.name;\r\n        }\r\n        return MezzuriteUtils.getFunctionName(WrappedComponent);\r\n    }\r\n\r\n    /**\r\n     * Gets complete name consisting of prefix, component name, and unique key.\r\n     * @param name component name\r\n     * @param key unique key\r\n     * @param clarifier optional clarifier\r\n     */\r\n    static getName(name: string, key: string): string {\r\n        return MezzuriteConstants.measureNamePrefix + ';' + name + ';' + key;\r\n    }\r\n\r\n    /**\r\n     * Creates metric to save to global mezzurite object\r\n     * @param metricType metric type\r\n     * @param value measured value\r\n     * @param data json metadata\r\n     */\r\n    static createMetric(metricType: string, value: number, data: any = null): any {\r\n        const obj: any = {\r\n            metricType: metricType,\r\n            value: value % 1 !== 0 ? parseFloat(value.toFixed(1)) : value\r\n        };\r\n        if (data !== null) {\r\n            obj.data = JSON.stringify(data);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * Walks DOM of a given element\r\n     * @param node DOM node\r\n     * @param key unique identifier\r\n     * @param func callback function\r\n     */\r\n    static walkDOM(node: any, key: string, func: any) {\r\n        func(node, key);\r\n        node = node.firstChild;\r\n        while (node) {\r\n            MezzuriteUtils.walkDOM(node, key, func);\r\n            node = node.nextSibling;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets fragment from full name\r\n     * @param fullName full name\r\n     * @param val value to pull\r\n     */\r\n    static getFullNamePart(fullName: string, val: string) {\r\n        const arr = fullName.split(';');\r\n        switch (val) {\r\n            case MezzuriteConstants.fullNamePartTitle:\r\n            return arr[1];\r\n            case MezzuriteConstants.fullNamePartKey:\r\n            return arr[2];\r\n            default:\r\n            return fullName;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Polyfill that adds CustomEvent for IE usage\r\n     */\r\n    static addCustomEventPolyfill() {\r\n        if ( typeof (<any>window).CustomEvent === 'function' ) {\r\n            return false;\r\n        }\r\n\r\n        function CustomEvent ( event: string, params: any ) {\r\n          params = params || { bubbles: false, cancelable: false, detail: undefined };\r\n          const evt = document.createEvent( 'CustomEvent' );\r\n          evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\r\n          return evt;\r\n         }\r\n\r\n        CustomEvent.prototype = (<any>window).Event.prototype;\r\n        (<any>window).CustomEvent = CustomEvent;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * Mezzurite Measure\r\n */\r\nexport class MezzuriteMeasure {\r\n    name: string;\r\n    id: string;\r\n    startTime: number;\r\n    endTime: number;\r\n    untilMount: number;\r\n    clt: number;\r\n    slowResource: object;\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { MezzuriteConstants } from '../utils/performance-constants';\r\nimport { MezzuriteUtils } from './performance-utils.service';\r\nimport { MezzuriteMeasure } from '../utils/performance-measure';\r\n\r\n/**\r\n * Class containing core timing functions\r\n */\r\nexport class PerformanceTimingService {\r\n    /**\r\n     * Creates measure object from given set of performance marks\r\n     * @param name full semicolon delimited name\r\n     * @param slowestResource Slowest resource inside component\r\n     * @param maxComponentEndTime Max component end time (if VLT)\r\n     */\r\n    static measure(name: string, slowestResource: any = null, maxComponentEndTime: any = null): void {\r\n        let startEntry;\r\n        let endEntry;\r\n\r\n        const componentTitle = MezzuriteUtils.getFullNamePart(name, MezzuriteConstants.fullNamePartTitle);\r\n\r\n        const key = MezzuriteUtils.getFullNamePart(name, MezzuriteConstants.fullNamePartKey);\r\n        if (name === undefined) {\r\n            return;\r\n        }\r\n        if (componentTitle === MezzuriteConstants.altName) {\r\n            // ALT\r\n            endEntry = performance.getEntriesByName(MezzuriteConstants.altMarkEnd)[0];\r\n        } else if (componentTitle === MezzuriteConstants.vltName) {\r\n            // VLT\r\n            startEntry = performance.getEntriesByName(MezzuriteConstants.vltMarkStart)[0];\r\n            endEntry = {\r\n                startTime: maxComponentEndTime\r\n            };\r\n        } else {\r\n            // Component\r\n            startEntry = performance.getEntriesByName(key + MezzuriteConstants.componentMarkStart)[0];\r\n            endEntry = performance.getEntriesByName(key + MezzuriteConstants.componentMarkEnd)[0];\r\n        }\r\n        // start time inside render hook\r\n        const renderStartEntry = performance.getEntriesByName(key + MezzuriteConstants.componentMarkRenderStart)[0];\r\n        const startTime = startEntry !== undefined ? startEntry.startTime : 0;\r\n        let endTime: number = endEntry.startTime;\r\n\r\n        // reset end time to end of slowest resource if\r\n        if (slowestResource !== null && slowestResource.responseEnd > endTime) {\r\n            endTime = slowestResource.responseEnd;\r\n        }\r\n\r\n        const mountDuration = endEntry.startTime - startTime;\r\n        const totalDuration = endTime - startTime;\r\n        const nameArr = name.split(';');\r\n\r\n        const obj = new MezzuriteMeasure();\r\n        obj.name = nameArr[1];\r\n        obj.id = nameArr[2];\r\n        obj.startTime = startTime % 1 !== 0 ? parseFloat(startTime.toFixed(1)) : startTime;\r\n        obj.endTime = parseFloat(endTime.toFixed(1));\r\n        obj.untilMount = parseFloat(mountDuration.toFixed(1));\r\n        obj.clt = parseFloat(totalDuration.toFixed(1));\r\n        obj.slowResource = {};\r\n\r\n        if (slowestResource && slowestResource.responseEnd >= startTime) {\r\n            (<any>obj).slowResource['endTime'] = parseFloat(slowestResource.responseEnd.toFixed(1));\r\n            (<any>obj).slowResource['name'] = slowestResource.name;\r\n        } else if (slowestResource !== null) {\r\n            (<any>obj).slowResource['endTime'] = -1;\r\n            (<any>obj).slowResource['name'] = slowestResource.name;\r\n        }\r\n\r\n        if (componentTitle !== MezzuriteConstants.altName && componentTitle !== MezzuriteConstants.vltName && renderStartEntry) {\r\n            (<any>obj)['renderStartTime'] = renderStartEntry.startTime;\r\n        }\r\n\r\n        (<any>window).mezzurite.measures.push(obj);\r\n    }\r\n\r\n    /**\r\n     * Gets measures by name\r\n     * @param name name\r\n     */\r\n    static getMeasuresByName(name: string) {\r\n        const result: any[] = [];\r\n        if (name === undefined || name === null) {\r\n            return null;\r\n        }\r\n        const measures = (<any>window).mezzurite.measures;\r\n        for (let i = 0; i < measures.length; i++) {\r\n            if (name === measures[i].name) {\r\n                result.push(measures[i]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n        /**\r\n     * Gets a specific measure by id\r\n     * @param id id\r\n     */\r\n    static getMeasureById(id: number) {\r\n        if (id === undefined || id === null) {\r\n            return null;\r\n        }\r\n        const measures = (<any>window).mezzurite.measures;\r\n        for (let i = 0; i < measures.length; i++) {\r\n            if (id === measures[i].id) {\r\n                return measures[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n            /**\r\n     * Gets a specific measure by name and id\r\n     * @param name name\r\n     * @param id id\r\n     */\r\n    static getMeasureByNameAndId(name: string, id: number) {\r\n        if (name === undefined || name === null || id === undefined || id === null) {\r\n            return null;\r\n        }\r\n        const measures = (<any>window).mezzurite.measures;\r\n        for (let i = 0; i < measures.length; i++) {\r\n            if (name === measures[i].name && id === measures[i].id) {\r\n                return measures[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets current components from a given capture cycle\r\n     */\r\n    static getCurrentComponents() {\r\n        const components = (<any>window).mezzurite.measures.filter((m: any) =>\r\n            m.name.indexOf(MezzuriteConstants.measureNamePrefix + ';' + MezzuriteConstants.altName) === -1 &&\r\n            m.name.indexOf(MezzuriteConstants.measureNamePrefix + ';' + MezzuriteConstants.vltName) === -1 &&\r\n            m.startTime >= (<any>window).mezzurite.startTime &&\r\n            m.startTime <= (<any>window).mezzurite.endTime\r\n        );\r\n        return components;\r\n    }\r\n\r\n    /**\r\n     * Gets lookup object of current components\r\n     */\r\n    static getCurrentComponentsLookup() {\r\n        const components = (<any>window).mezzurite.measures.filter((m: any) =>\r\n            m.name.indexOf(MezzuriteConstants.measureNamePrefix + ';' + MezzuriteConstants.altName) === -1 &&\r\n            m.name.indexOf(MezzuriteConstants.measureNamePrefix + ';' + MezzuriteConstants.vltName) === -1 &&\r\n            m.startTime >= (<any>window).mezzurite.startTime &&\r\n            m.startTime <= (<any>window).mezzurite.endTime\r\n        );\r\n        const obj: any = {};\r\n        for (let i = 0; i < components.length; i++) {\r\n            obj[MezzuriteConstants.measureNamePrefix + ';' + components[i].name + ';' + components[i].id] = components[i];\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * Calculates viewport load time\r\n     */\r\n    static calculateVlt() {\r\n        let maxComponent = null;\r\n        let maxEndTime = 0;\r\n        const vltComponents: any[] = [];\r\n        const components: any = this.getCurrentComponentsLookup();\r\n        const vltLookup = (<any>window).mezzurite.vltComponentLookup;\r\n        let measure;\r\n        for (const key in vltLookup) {\r\n            if (components[key] && vltLookup[key] === true) {\r\n                vltComponents.push(components[key]);\r\n                if (maxComponent !== null) {\r\n                    let slowestResourceEnd = 0;\r\n                    const slowestResource = (<any>window).mezzurite.slowestResource[key];\r\n                    if (slowestResource !== undefined && slowestResource !== null) {\r\n                        slowestResourceEnd = slowestResource.responseEnd;\r\n                    }\r\n                    const maxLast = maxComponent.clt + maxComponent.startTime;\r\n                    const currLast = components[key].clt + components[key].startTime;\r\n                    if (currLast > maxLast) {\r\n                        maxComponent = components[key];\r\n                        maxEndTime = currLast;\r\n                    }\r\n                } else {\r\n                    maxComponent = components[key];\r\n                }\r\n            }\r\n        }\r\n        if (maxComponent !== null) {\r\n            const fullName = MezzuriteConstants.measureNamePrefix + ';' + MezzuriteConstants.vltName + ';' + maxComponent.id;\r\n            this.measure(fullName, null, maxComponent.endTime);\r\n            measure = this.getMeasureByNameAndId(MezzuriteConstants.vltName, maxComponent.id);\r\n            performance.clearMarks(MezzuriteConstants.vltMarkStart);\r\n        } else {\r\n            return null;\r\n            // no components in view\r\n        }\r\n        return {\r\n            vlt: measure.clt,\r\n            components: vltComponents\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates sub-element lookup object on global mezzurite object\r\n     * @param el\r\n     * @param key\r\n     */\r\n    static getElNames(el: any, key: string) {\r\n        if ((<any>window).mezzurite.childElementNames[key] === undefined) {\r\n            (<any>window).mezzurite.childElementNames[key] = [];\r\n        }\r\n        if (el.tagName === 'IMG') {\r\n            (<any>window).mezzurite.childElementNames[key].push(el.src);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates slowest resource within a given component element\r\n     * @param el parent element\r\n     * @param fullName component fullname\r\n     */\r\n    static calculateSlowestResource(el: any, fullName: string) {\r\n        const key = MezzuriteUtils.getFullNamePart(fullName, MezzuriteConstants.fullNamePartKey);\r\n        let slowestResource = null;\r\n        MezzuriteUtils.walkDOM(el, key, this.getElNames);\r\n\r\n        const resources: any = performance.getEntriesByType('resource').filter((r: any) => (<any>r).initiatorType === 'img');\r\n        const currentResources = (<any>window).mezzurite.childElementNames[key];\r\n        if (resources.length === 0) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < currentResources.length; i++) {\r\n            for (let j = 0; j < resources.length; j++) {\r\n                if (currentResources[i] === resources[j].name &&\r\n                   (slowestResource === null || resources[j].responseEnd > slowestResource.responseEnd)) {\r\n                        slowestResource = resources[j];\r\n                }\r\n            }\r\n        }\r\n        (<any>window).mezzurite.slowestResource[fullName] = slowestResource;\r\n        return slowestResource;\r\n    }\r\n\r\n    static calculateSlowestResourceBatch() {\r\n        let slow;\r\n        const elementDict = (<any>window).mezzurite.elementLookup;\r\n        for (const prop in elementDict) {\r\n            slow = this.calculateSlowestResource(elementDict[prop], prop);\r\n            if (slow === null) {\r\n                PerformanceTimingService.measure(prop);\r\n            } else {\r\n                PerformanceTimingService.measure(prop, slow);\r\n            }\r\n        }\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { MezzuriteConstants } from '../utils/performance-constants';\r\nimport { PerformanceTimingService } from './performance-timing.service';\r\nimport { MezzuriteUtils } from './performance-utils.service';\r\n\r\n/**\r\n * Class containing core telemetry functions\r\n */\r\nexport class PerformanceTelemetryService {\r\n    /**\r\n     * Starts capture cycle period\r\n     */\r\n    static startCaptureCycle() {\r\n        if (!(<any>window).mezzurite.captureCycleStarted) {\r\n            (<any>window).mezzurite.startTime = window.performance.now();\r\n            (<any>window).mezzurite.captureCycleStarted = true;\r\n            (<any>window).mezzurite.captureTimer = setTimeout(function() {\r\n                PerformanceTelemetryService.captureTimings();\r\n            }, MezzuriteConstants.captureCycleTimeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Captures timings for the given period\r\n     * @param isRedirect Bool dictating whether timings were captured at end of cycle or early\r\n     */\r\n    static captureTimings(isRedirect = false) {\r\n        clearTimeout((<any>window).mezzurite.captureTimer);\r\n        (<any>window).mezzurite.endTime = window.performance.now();\r\n        if (!(<any>window).mezzurite.captureCycleStarted) {\r\n            (<any>window).mezzurite.captureCycleStarted = true;\r\n        }\r\n        PerformanceTelemetryService.submitTelemetry(isRedirect);\r\n        (<any>window).mezzurite.captureCycleStarted = false;\r\n    }\r\n\r\n    /**\r\n     * Creates timings object to send to telemetry\r\n     * @param isRedirect isRedirect bool\r\n     */\r\n    static submitTelemetry(isRedirect: boolean): void {\r\n        const timings: any[] = [];\r\n        // add redirect value\r\n        timings.push(MezzuriteUtils.createMetric(MezzuriteConstants.redirect, isRedirect === false ? 0 : 1));\r\n\r\n        // calculate component measures off slowest resource values\r\n        if ((<any>window).mezzurite.elementLookup !== {}) {\r\n            PerformanceTimingService.calculateSlowestResourceBatch();\r\n        }\r\n        // all components\r\n        const components = PerformanceTimingService.getCurrentComponents();\r\n        if ((<any>window).mezzurite.routerPerf) {\r\n            // alt\r\n            if ((<any>window).mezzurite.firstViewLoaded === false) {\r\n                const altMeasure = (<any>window).mezzurite.measures.filter((m: any) => m.name.indexOf(MezzuriteConstants.altName) > -1)[0];\r\n                timings.push(MezzuriteUtils.createMetric(MezzuriteConstants.altName, altMeasure.clt));\r\n                (<any>window).mezzurite.firstViewLoaded = true;\r\n            }\r\n            // vlt\r\n            if (components.length > 0) {\r\n                const vltResults = PerformanceTimingService.calculateVlt();\r\n                if (vltResults !== null) {\r\n                    timings.push(MezzuriteUtils.createMetric(MezzuriteConstants.vltName, vltResults.vlt, vltResults.components));\r\n                }\r\n            }\r\n            if (components.length === 0) {\r\n                performance.clearMarks(MezzuriteConstants.vltMarkStart);\r\n            }\r\n        }\r\n        if (components.length > 0) {\r\n            timings.push(MezzuriteUtils.createMetric(MezzuriteConstants.allComponents, -1, components));\r\n        }\r\n        this.log(timings);\r\n        MezzuriteUtils.testReset();\r\n    }\r\n\r\n    /**\r\n     * Adds remaining metadata to send to logger and dispatches event\r\n     * @param timings\r\n     */\r\n    static log(timings: any) {\r\n        if ((<any>window).mezzurite) {\r\n            if (timings.length > 1) {\r\n                const obj = {\r\n                    Timings: timings,\r\n                    Framework: {\r\n                        name: (<any>window).mezzurite.packageName,\r\n                        version: (<any>window).mezzurite.packageVersion\r\n                    },\r\n                    ViewportWidth: (<any>window).mezzurite.viewportWidth,\r\n                    ViewportHeight: (<any>window).mezzurite.viewportHeight,\r\n                    ObjectVersion: MezzuriteConstants.mezzuriteObjectVersion\r\n                };\r\n                // log to console when developing locally\r\n                if ((<any>window).location.href.indexOf('localhost') > -1) {\r\n                    console.log('to log for testing: ', obj);\r\n                }\r\n                if ((<any>window).mezzurite.EventElement) {\r\n                    (<any>window).mezzurite.EventElement.dispatchEvent(new CustomEvent('Timing', {detail: obj}));\r\n                }\r\n            } else {\r\n                console.log('nothing for Mezzurite to log.');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether window.performance is undefined\r\n     */\r\n    static compatibilityCheck() {\r\n        const isCompatible = (window.performance !== undefined);\r\n        if (!isCompatible) {\r\n                const timings = [\r\n                   MezzuriteUtils.createMetric(MezzuriteConstants.unsupportedBrowserName,\r\n                   -1,\r\n                   MezzuriteConstants.unsupportedBrowserPerf)\r\n                ];\r\n            this.log(timings);\r\n        }\r\n        return isCompatible;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * Class for a given performance metric\r\n */\r\nexport class PerfMetric {\r\n    metricType: string;\r\n    value: number;\r\n    data?: object;\r\n}"],"names":[],"mappings":"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"}