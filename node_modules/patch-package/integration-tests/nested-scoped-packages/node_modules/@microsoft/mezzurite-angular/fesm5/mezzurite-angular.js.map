{"version":3,"file":"mezzurite-angular.js","sources":["../package/src/services/angular-environment.ts","../package/src/services/angular-performance-utils.service.ts","../package/src/services/angular-routing.service.ts","../package/src/components/angular-performance.directive.ts","../package/src/modules/angular-performance.module.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * Gets information from package.json\r\n */\r\nconst environment = {\r\n    version: require('../package.json').version,\r\n    name: require('../package.json').name\r\n};\r\n\r\nexport { environment };","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { MezzuriteUtils } from '@microsoft/mezzurite-core';\r\nimport {environment} from './angular-environment';\r\n\r\n/**\r\n * Extension of Mezzurite Utilities that gets package specific information\r\n */\r\nexport class MezzuriteAngularUtils extends MezzuriteUtils {\r\n    static createMezzuriteObject(obj: any) {\r\n        super.createMezzuriteObject(obj);\r\n        (<any>window).mezzurite.packageVersion = environment.version;\r\n        (<any>window).mezzurite.packageName = environment.name;\r\n    }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { filter } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router, NavigationStart } from '@angular/router';\r\nimport { PerformanceTimingService, PerformanceTelemetryService, MezzuriteConstants} from '@microsoft/mezzurite-core';\r\nimport { MezzuriteAngularUtils } from './angular-performance-utils.service';\r\n\r\n\r\n/**\r\n * RoutingService is responsible for listening to the routing events coming\r\n * into the application and creating performance marks based on them.\r\n */\r\n@Injectable()\r\nexport class RoutingService {\r\n    endCounter = 0;\r\n\r\n    constructor(private router: Router) {\r\n            if (!(<any>window).mezzurite) {\r\n                (<any>window).mezzurite = {};\r\n            }\r\n            MezzuriteAngularUtils.createMezzuriteObject((<any>window).mezzurite);\r\n            (<any>window).mezzurite.routerPerf = true;\r\n        }\r\n\r\n    /**\r\n     * this method begins the listening process. Must be called for code to function properly.\r\n     */\r\n    start(): void {\r\n        const onNavStart$ = (<any>this).router.events.pipe(filter(event => event instanceof NavigationStart));\r\n\r\n\r\n        onNavStart$.subscribe((e: any) => {\r\n           this.handleRoute(e);\r\n        });\r\n    }\r\n\r\n    handleRoute(e: any){\r\n        (<any>window).mezzurite.routeUrl= e.url;\r\n        if ((<any>window).mezzurite.captureCycleStarted){\r\n\r\n            (<any>window).mezzurite.captureCycleStarted = false;\r\n            PerformanceTelemetryService.captureTimings(true);\r\n            window.performance.mark(MezzuriteConstants.vltMarkStart);\r\n            // starts a new capture cycle\r\n            PerformanceTelemetryService.startCaptureCycle();\r\n        } else {\r\n            // starts the capture cycle to transmit telemetry if current pathname is different than recentPath\r\n            PerformanceTelemetryService.startCaptureCycle();\r\n            // If first load, capture ALT\r\n            if (!(<any>window).mezzurite.firstViewLoaded) {\r\n                window.performance.mark(MezzuriteConstants.altMarkEnd);\r\n                window.performance.mark(MezzuriteConstants.vltMarkStart);\r\n                const fullName = MezzuriteAngularUtils.getName(MezzuriteConstants.altName, MezzuriteAngularUtils.makeId());\r\n                PerformanceTimingService.measure(fullName, 0, MezzuriteConstants.altMarkEnd);\r\n            } else {\r\n                window.performance.mark(MezzuriteConstants.vltMarkStart);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { Directive, OnInit, ElementRef, Input } from '@angular/core';\r\nimport { MezzuriteUtils, MezzuriteConstants } from '@microsoft/mezzurite-core';\r\nimport 'intersection-observer';\r\n\r\n@Directive({\r\n     selector: '[mezzurite]'\r\n})\r\n\r\n/**\r\n * Directive that enables tracking on specific component elements\r\n */\r\nexport class MezzuriteDirective implements OnInit {\r\n\r\n    private id: string;\r\n    private fullName: string;\r\n    private el: HTMLElement;\r\n    // tslint:disable-next-line:no-input-rename\r\n    @Input('component-title') title = 'MyComponent';\r\n\r\n    constructor(ref: ElementRef) {\r\n        this.id = MezzuriteUtils.makeId();\r\n        performance.mark(this.id + MezzuriteConstants.componentMarkStart);\r\n        this.el = ref.nativeElement;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.fullName = MezzuriteUtils.getName(this.title, this.id);\r\n        (<any>window).mezzurite.elementLookup[this.fullName] = this.el;\r\n        const that = this;\r\n        const config = {\r\n            root: null as any, // setting it to 'null' sets it to default value: viewport\r\n            rootMargin: '0px'\r\n        };\r\n\r\n        const intObserver = new IntersectionObserver(function(entries, observer) {\r\n            performance.mark(that.id + MezzuriteConstants.componentMarkEnd);\r\n            const entry = entries[0];\r\n            (<any>window).mezzurite.viewportWidth = entry.rootBounds.width;\r\n            (<any>window).mezzurite.viewportHeight = entry.rootBounds.height;\r\n            if (entry.isIntersecting) {\r\n                (<any>window).mezzurite.vltComponentLookup[that.fullName] = true;\r\n            }\r\n            observer.unobserve(that.el);\r\n        }, config);\r\n            intObserver.observe(this.el);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { MezzuriteDirective } from '../components/angular-performance.directive';\r\nimport { RoutingService } from '../services/angular-routing.service';\r\n\r\n\r\n@NgModule({\r\n    declarations: [MezzuriteDirective],\r\n    exports: [MezzuriteDirective]\r\n})\r\n\r\n/**\r\n * Mezzurite Performance Module for Angular\r\n */\r\nexport class AngularPerfModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: AngularPerfModule,\r\n            providers: [\r\n                RoutingService\r\n                // Add new services here.\r\n            ]\r\n        };\r\n    }\r\n}"],"names":["tslib_1.__extends"],"mappings":"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"}