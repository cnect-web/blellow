{"version":3,"file":"angular-routing.service.js","sourceRoot":"","sources":["../../../src/services/angular-routing.service.ts"],"names":[],"mappings":";;;;;;AAGA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAC1D,OAAO,EAAE,wBAAwB,EAAE,2BAA2B,EAAE,kBAAkB,EAAC,MAAM,2BAA2B,CAAC;AACrH,OAAO,EAAE,qBAAqB,EAAE,MAAM,qCAAqC,CAAC;;;;;;IAWxE,wBAAoB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;0BAFrB,CAAC;QAGN,IAAI,CAAC,mBAAM,MAAM,EAAC,CAAC,SAAS,EAAE;YAC1B,mBAAM,MAAM,EAAC,CAAC,SAAS,GAAG,EAAE,CAAC;SAChC;QACD,qBAAqB,CAAC,qBAAqB,CAAC,mBAAM,MAAM,EAAC,CAAC,SAAS,CAAC,CAAC;QACrE,mBAAM,MAAM,EAAC,CAAC,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC;KAC7C;IAEL;;OAEG;;;;;IACH,8BAAK;;;;IAAL;QAAA,iBAOC;;QANG,IAAM,WAAW,GAAG,mBAAM,IAAI,EAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,YAAY,eAAe,EAAhC,CAAgC,CAAC,CAAC,CAAC;QAGtG,WAAW,CAAC,SAAS,CAAC,UAAC,CAAM;YAC1B,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;SACtB,CAAC,CAAC;KACN;;;;;IAED,oCAAW;;;;IAAX,UAAY,CAAM;QACd,mBAAM,MAAM,EAAC,CAAC,SAAS,CAAC,QAAQ,GAAE,CAAC,CAAC,GAAG,CAAC;QACxC,IAAI,mBAAM,MAAM,EAAC,CAAC,SAAS,CAAC,mBAAmB,EAAC;YAE5C,mBAAM,MAAM,EAAC,CAAC,SAAS,CAAC,mBAAmB,GAAG,KAAK,CAAC;YACpD,2BAA2B,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;;YAEzD,2BAA2B,CAAC,iBAAiB,EAAE,CAAC;SACnD;aAAM;;YAEH,2BAA2B,CAAC,iBAAiB,EAAE,CAAC;;YAEhD,IAAI,CAAC,mBAAM,MAAM,EAAC,CAAC,SAAS,CAAC,eAAe,EAAE;gBAC1C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;gBACvD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;;gBACzD,IAAM,QAAQ,GAAG,qBAAqB,CAAC,OAAO,CAAC,kBAAkB,CAAC,OAAO,EAAE,qBAAqB,CAAC,MAAM,EAAE,CAAC,CAAC;gBAC3G,wBAAwB,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,EAAE,kBAAkB,CAAC,UAAU,CAAC,CAAC;aAChF;iBAAM;gBACH,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;aAC5D;SACJ;KACJ;;gBA9CJ,UAAU;;;;gBATF,MAAM;;yBALf;;SAea,cAAc","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { filter } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router, NavigationStart } from '@angular/router';\r\nimport { PerformanceTimingService, PerformanceTelemetryService, MezzuriteConstants} from '@microsoft/mezzurite-core';\r\nimport { MezzuriteAngularUtils } from './angular-performance-utils.service';\r\n\r\n\r\n/**\r\n * RoutingService is responsible for listening to the routing events coming\r\n * into the application and creating performance marks based on them.\r\n */\r\n@Injectable()\r\nexport class RoutingService {\r\n    endCounter = 0;\r\n\r\n    constructor(private router: Router) {\r\n            if (!(<any>window).mezzurite) {\r\n                (<any>window).mezzurite = {};\r\n            }\r\n            MezzuriteAngularUtils.createMezzuriteObject((<any>window).mezzurite);\r\n            (<any>window).mezzurite.routerPerf = true;\r\n        }\r\n\r\n    /**\r\n     * this method begins the listening process. Must be called for code to function properly.\r\n     */\r\n    start(): void {\r\n        const onNavStart$ = (<any>this).router.events.pipe(filter(event => event instanceof NavigationStart));\r\n\r\n\r\n        onNavStart$.subscribe((e: any) => {\r\n           this.handleRoute(e);\r\n        });\r\n    }\r\n\r\n    handleRoute(e: any){\r\n        (<any>window).mezzurite.routeUrl= e.url;\r\n        if ((<any>window).mezzurite.captureCycleStarted){\r\n\r\n            (<any>window).mezzurite.captureCycleStarted = false;\r\n            PerformanceTelemetryService.captureTimings(true);\r\n            window.performance.mark(MezzuriteConstants.vltMarkStart);\r\n            // starts a new capture cycle\r\n            PerformanceTelemetryService.startCaptureCycle();\r\n        } else {\r\n            // starts the capture cycle to transmit telemetry if current pathname is different than recentPath\r\n            PerformanceTelemetryService.startCaptureCycle();\r\n            // If first load, capture ALT\r\n            if (!(<any>window).mezzurite.firstViewLoaded) {\r\n                window.performance.mark(MezzuriteConstants.altMarkEnd);\r\n                window.performance.mark(MezzuriteConstants.vltMarkStart);\r\n                const fullName = MezzuriteAngularUtils.getName(MezzuriteConstants.altName, MezzuriteAngularUtils.makeId());\r\n                PerformanceTimingService.measure(fullName, 0, MezzuriteConstants.altMarkEnd);\r\n            } else {\r\n                window.performance.mark(MezzuriteConstants.vltMarkStart);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}