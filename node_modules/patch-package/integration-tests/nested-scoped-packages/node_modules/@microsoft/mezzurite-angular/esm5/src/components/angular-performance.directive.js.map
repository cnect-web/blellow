{"version":3,"file":"angular-performance.directive.js","sourceRoot":"","sources":["../../../src/components/angular-performance.directive.ts"],"names":[],"mappings":";;;;;;AAGA,OAAO,EAAE,SAAS,EAAU,UAAU,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACrE,OAAO,EAAE,cAAc,EAAE,kBAAkB,EAAE,MAAM,2BAA2B,CAAC;AAC/E,OAAO,uBAAuB,CAAC;;IAiB3B,4BAAY,GAAe;;qBAFO,aAAa;QAG3C,IAAI,CAAC,EAAE,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC;QAClC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;QAClE,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC;KAC/B;;;;IAED,qCAAQ;;;IAAR;QACI,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QAC5D,mBAAM,MAAM,EAAC,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;;QAC/D,IAAM,IAAI,GAAG,IAAI,CAAC;;QAClB,IAAM,MAAM,GAAG;YACX,IAAI,oBAAE,IAAW,CAAA;;YACjB,UAAU,EAAE,KAAK;SACpB,CAAC;;QAEF,IAAM,WAAW,GAAG,IAAI,oBAAoB,CAAC,UAAS,OAAO,EAAE,QAAQ;YACnE,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;;YAChE,IAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACzB,mBAAM,MAAM,EAAC,CAAC,SAAS,CAAC,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC;YAC/D,mBAAM,MAAM,EAAC,CAAC,SAAS,CAAC,cAAc,GAAG,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC;YACjE,IAAI,KAAK,CAAC,cAAc,EAAE;gBACtB,mBAAM,MAAM,EAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;aACpE;YACD,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC/B,EAAE,MAAM,CAAC,CAAC;QACP,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACpC;;gBAzCJ,SAAS,SAAC;oBACN,QAAQ,EAAE,aAAa;iBAC3B;;;;gBAN2B,UAAU;;;wBAiBjC,KAAK,SAAC,iBAAiB;;6BApB5B;;SAca,kBAAkB","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { Directive, OnInit, ElementRef, Input } from '@angular/core';\r\nimport { MezzuriteUtils, MezzuriteConstants } from '@microsoft/mezzurite-core';\r\nimport 'intersection-observer';\r\n\r\n@Directive({\r\n     selector: '[mezzurite]'\r\n})\r\n\r\n/**\r\n * Directive that enables tracking on specific component elements\r\n */\r\nexport class MezzuriteDirective implements OnInit {\r\n\r\n    private id: string;\r\n    private fullName: string;\r\n    private el: HTMLElement;\r\n    // tslint:disable-next-line:no-input-rename\r\n    @Input('component-title') title = 'MyComponent';\r\n\r\n    constructor(ref: ElementRef) {\r\n        this.id = MezzuriteUtils.makeId();\r\n        performance.mark(this.id + MezzuriteConstants.componentMarkStart);\r\n        this.el = ref.nativeElement;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.fullName = MezzuriteUtils.getName(this.title, this.id);\r\n        (<any>window).mezzurite.elementLookup[this.fullName] = this.el;\r\n        const that = this;\r\n        const config = {\r\n            root: null as any, // setting it to 'null' sets it to default value: viewport\r\n            rootMargin: '0px'\r\n        };\r\n\r\n        const intObserver = new IntersectionObserver(function(entries, observer) {\r\n            performance.mark(that.id + MezzuriteConstants.componentMarkEnd);\r\n            const entry = entries[0];\r\n            (<any>window).mezzurite.viewportWidth = entry.rootBounds.width;\r\n            (<any>window).mezzurite.viewportHeight = entry.rootBounds.height;\r\n            if (entry.isIntersecting) {\r\n                (<any>window).mezzurite.vltComponentLookup[that.fullName] = true;\r\n            }\r\n            observer.unobserve(that.el);\r\n        }, config);\r\n            intObserver.observe(this.el);\r\n    }\r\n}\r\n"]}