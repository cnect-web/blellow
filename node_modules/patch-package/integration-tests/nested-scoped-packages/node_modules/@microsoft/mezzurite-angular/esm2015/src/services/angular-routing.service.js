/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import { filter } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { PerformanceTimingService, PerformanceTelemetryService, MezzuriteConstants } from '@microsoft/mezzurite-core';
import { MezzuriteAngularUtils } from './angular-performance-utils.service';
/**
 * RoutingService is responsible for listening to the routing events coming
 * into the application and creating performance marks based on them.
 */
export class RoutingService {
    /**
     * @param {?} router
     */
    constructor(router) {
        this.router = router;
        this.endCounter = 0;
        if (!(/** @type {?} */ (window)).mezzurite) {
            (/** @type {?} */ (window)).mezzurite = {};
        }
        MezzuriteAngularUtils.createMezzuriteObject((/** @type {?} */ (window)).mezzurite);
        (/** @type {?} */ (window)).mezzurite.routerPerf = true;
    }
    /**
     * this method begins the listening process. Must be called for code to function properly.
     * @return {?}
     */
    start() {
        /** @type {?} */
        const onNavStart$ = (/** @type {?} */ (this)).router.events.pipe(filter(event => event instanceof NavigationStart));
        onNavStart$.subscribe((e) => {
            this.handleRoute(e);
        });
    }
    /**
     * @param {?} e
     * @return {?}
     */
    handleRoute(e) {
        (/** @type {?} */ (window)).mezzurite.routeUrl = e.url;
        if ((/** @type {?} */ (window)).mezzurite.captureCycleStarted) {
            (/** @type {?} */ (window)).mezzurite.captureCycleStarted = false;
            PerformanceTelemetryService.captureTimings(true);
            window.performance.mark(MezzuriteConstants.vltMarkStart);
            // starts a new capture cycle
            PerformanceTelemetryService.startCaptureCycle();
        }
        else {
            // starts the capture cycle to transmit telemetry if current pathname is different than recentPath
            PerformanceTelemetryService.startCaptureCycle();
            // If first load, capture ALT
            if (!(/** @type {?} */ (window)).mezzurite.firstViewLoaded) {
                window.performance.mark(MezzuriteConstants.altMarkEnd);
                window.performance.mark(MezzuriteConstants.vltMarkStart);
                /** @type {?} */
                const fullName = MezzuriteAngularUtils.getName(MezzuriteConstants.altName, MezzuriteAngularUtils.makeId());
                PerformanceTimingService.measure(fullName, 0, MezzuriteConstants.altMarkEnd);
            }
            else {
                window.performance.mark(MezzuriteConstants.vltMarkStart);
            }
        }
    }
}
RoutingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RoutingService.ctorParameters = () => [
    { type: Router }
];
if (false) {
    /** @type {?} */
    RoutingService.prototype.endCounter;
    /** @type {?} */
    RoutingService.prototype.router;
}
//# sourceMappingURL=angular-routing.service.js.map