"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs-extra");
var path = require("./path");
var tmp = require("tmp");
function _getPatchFiles(rootPatchesDir, scopedDir, acc) {
    if (scopedDir === void 0) { scopedDir = ""; }
    if (acc === void 0) { acc = []; }
    fs.readdirSync(path.join(rootPatchesDir, scopedDir)).forEach(function (filename) {
        if (filename.endsWith(".patch")) {
            acc.push(path.join(scopedDir, filename));
        }
        else if (filename.startsWith("@") &&
            fs.statSync(path.join(rootPatchesDir, filename)).isDirectory()) {
            _getPatchFiles(rootPatchesDir, filename, acc);
        }
    });
    return acc;
}
function getPatchFiles(patchesDir) {
    return _getPatchFiles(patchesDir);
}
exports.getPatchFiles = getPatchFiles;
function removeGitHeadersFromSource(patchFileSource) {
    return patchFileSource
        .split(/\r?\n/)
        .filter(function (line) { return !line.startsWith("diff") && !line.startsWith("index"); })
        .join("\n");
}
exports.removeGitHeadersFromSource = removeGitHeadersFromSource;
function removeGitHeadersFromPath(patchFilePath) {
    var tmpFile = tmp.fileSync({ unsafeCleanup: true });
    fs.writeFileSync(tmpFile.name, removeGitHeadersFromSource(fs.readFileSync(patchFilePath).toString()));
    return tmpFile.name;
}
exports.removeGitHeadersFromPath = removeGitHeadersFromPath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0Y2hGcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXRjaEZzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQThCO0FBQzlCLDZCQUE4QjtBQUM5Qix5QkFBMEI7QUFFMUIsd0JBQ0UsY0FBc0IsRUFDdEIsU0FBc0IsRUFDdEIsR0FBa0I7SUFEbEIsMEJBQUEsRUFBQSxjQUFzQjtJQUN0QixvQkFBQSxFQUFBLFFBQWtCO0lBRWxCLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxRQUFRO1FBQ25FLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUMxQyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUNSLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1lBQ3hCLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQzlELENBQUMsQ0FBQyxDQUFDO1lBQ0QsY0FBYyxDQUFDLGNBQWMsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDL0MsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFBO0lBQ0YsTUFBTSxDQUFDLEdBQUcsQ0FBQTtBQUNaLENBQUM7QUFFRCx1QkFBOEIsVUFBa0I7SUFDOUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUNuQyxDQUFDO0FBRkQsc0NBRUM7QUFFRCxvQ0FBMkMsZUFBdUI7SUFDaEUsTUFBTSxDQUFDLGVBQWU7U0FDbkIsS0FBSyxDQUFDLE9BQU8sQ0FBQztTQUNkLE1BQU0sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQXJELENBQXFELENBQUM7U0FDckUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ2YsQ0FBQztBQUxELGdFQUtDO0FBRUQsa0NBQXlDLGFBQXFCO0lBQzVELElBQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUNyRCxFQUFFLENBQUMsYUFBYSxDQUNkLE9BQU8sQ0FBQyxJQUFJLEVBQ1osMEJBQTBCLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUN0RSxDQUFBO0lBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUE7QUFDckIsQ0FBQztBQVBELDREQU9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzLWV4dHJhXCJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcIi4vcGF0aFwiXG5pbXBvcnQgKiBhcyB0bXAgZnJvbSBcInRtcFwiXG5cbmZ1bmN0aW9uIF9nZXRQYXRjaEZpbGVzKFxuICByb290UGF0Y2hlc0Rpcjogc3RyaW5nLFxuICBzY29wZWREaXI6IHN0cmluZyA9IFwiXCIsXG4gIGFjYzogc3RyaW5nW10gPSBbXSxcbikge1xuICBmcy5yZWFkZGlyU3luYyhwYXRoLmpvaW4ocm9vdFBhdGNoZXNEaXIsIHNjb3BlZERpcikpLmZvckVhY2goZmlsZW5hbWUgPT4ge1xuICAgIGlmIChmaWxlbmFtZS5lbmRzV2l0aChcIi5wYXRjaFwiKSkge1xuICAgICAgYWNjLnB1c2gocGF0aC5qb2luKHNjb3BlZERpciwgZmlsZW5hbWUpKVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBmaWxlbmFtZS5zdGFydHNXaXRoKFwiQFwiKSAmJlxuICAgICAgZnMuc3RhdFN5bmMocGF0aC5qb2luKHJvb3RQYXRjaGVzRGlyLCBmaWxlbmFtZSkpLmlzRGlyZWN0b3J5KClcbiAgICApIHtcbiAgICAgIF9nZXRQYXRjaEZpbGVzKHJvb3RQYXRjaGVzRGlyLCBmaWxlbmFtZSwgYWNjKVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIGFjY1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0Y2hGaWxlcyhwYXRjaGVzRGlyOiBzdHJpbmcpIHtcbiAgcmV0dXJuIF9nZXRQYXRjaEZpbGVzKHBhdGNoZXNEaXIpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVHaXRIZWFkZXJzRnJvbVNvdXJjZShwYXRjaEZpbGVTb3VyY2U6IHN0cmluZykge1xuICByZXR1cm4gcGF0Y2hGaWxlU291cmNlXG4gICAgLnNwbGl0KC9cXHI/XFxuLylcbiAgICAuZmlsdGVyKGxpbmUgPT4gIWxpbmUuc3RhcnRzV2l0aChcImRpZmZcIikgJiYgIWxpbmUuc3RhcnRzV2l0aChcImluZGV4XCIpKVxuICAgIC5qb2luKFwiXFxuXCIpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVHaXRIZWFkZXJzRnJvbVBhdGgocGF0Y2hGaWxlUGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgdG1wRmlsZSA9IHRtcC5maWxlU3luYyh7IHVuc2FmZUNsZWFudXA6IHRydWUgfSlcbiAgZnMud3JpdGVGaWxlU3luYyhcbiAgICB0bXBGaWxlLm5hbWUsXG4gICAgcmVtb3ZlR2l0SGVhZGVyc0Zyb21Tb3VyY2UoZnMucmVhZEZpbGVTeW5jKHBhdGNoRmlsZVBhdGgpLnRvU3RyaW5nKCkpLFxuICApXG4gIHJldHVybiB0bXBGaWxlLm5hbWVcbn1cbiJdfQ==